@mixin mq($bp) {
  @if (str-index($bp, "below-")) {
    @if ($bp == below-bp) {
      @media (max-width: 479px) {
        @content;
      }
    } @else {
      $unit: str-replace($bp, "below-", "");
      @media (max-width: $unit) {
        @content;
      }
    }
  }

  @if (str-index($bp, "above-")) {
    @if ($bp == above-bp) {
      @media (min-width: 480px) {
        @content;
      }
    } @else {
      $unit: str-replace($bp, "above-", "");
      @media (min-width: $unit) {
        @content;
      }
    }
  }
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(
        #{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}
      );
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@mixin keep-ratio($ratio: "1/1") {
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    display: block;
    width: 100%;

    @if ($ratio) {
      $ratio1: str-slice($ratio, 1, (str-index($ratio, "/") - 1));
      $ratio2: str-slice($ratio, (str-index($ratio, "/") + 1));

      padding-top: (to-number($ratio2) / to-number($ratio1)) * 100%;
    }
  }

  & > * {
    position: absolute;
  }

  & > img,
  & > figure,
  & > picture,
  & > iframe,
  & > video {
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
  }
}

// Do your Math!
// --------------------------------------------------------------------------

@function sqrt($number) {
  $x0: 1;
  $x1: $x0;
  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($number)) / (2 * $x0);
    $x0: $x1;
  }
  @return $x1;
}

@function pow($number, $exponent) {
  $x0: 1;
  $number: $x0 * $number;
  @if $exponent > 0 {
    @for $i from 1 through $exponent {
      $x0: $x0 * $number;
    }
  }
  @return $x0;
}

// Cast a string to a number
// --------------------------------------------------------------------------

@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    $_: log("Value for `to-number` should be a number or a string.");
  }

  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == "-";
  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);

    @if $character == "." {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }

  @return if($minus, -$result, $result);
}
